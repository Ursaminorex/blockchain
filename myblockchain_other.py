import hashlib
import json
#from time 
import time
from urllib.parse import urlparse
from uuid import uuid4

import requests
from flask import Flask, jsonify, request
import _thread
import socket
import string
import configparser

class Blockchain:
    def __init__(self):
        self.current_transactions = []
        self.chain = []
        self.nodes = set()
        #self.nodes.add('192.168.1.101:5000')
        cf = configparser.ConfigParser()
        nodes = []
        try:
            cf.read('config.ini')
            ns = cf.get('init', 'nodes')
            nodes = ns.split(',')
        except Exception as ex:
            print(ex)
        for node in nodes:
            self.nodes.add(node)
        print(self.nodes)

        block_version="0.01"
        # Create the genesis block
        self.new_block(block_version,previous_hash='0')
        print("init....")
        print("first block generated:")
    def register_node(self, address):
        """
        Add a new node to the list of nodes

        :param address: Address of node. Eg. 'http://192.168.0.5:5000'
        """

        parsed_url = urlparse(address)
        if parsed_url.netloc:
            self.nodes.add(parsed_url.netloc)
        elif parsed_url.path:
            # Accepts an URL without scheme like '192.168.0.5:5000'.
            self.nodes.add(parsed_url.path)
        else:
            raise ValueError('Invalid URL')


    def valid_chain(self, chain):
        """
        Determine if a given blockchain is valid

        :param chain: A blockchain
        :return: True if valid, False if not
        """

        last_block = chain[0]
        current_index = 1

        while current_index < len(chain):
            block = chain[current_index]
            # print(f'{last_block}')
            # print(f'{block}')
            # print("\n-----------\n")
            # Check that the hash of the block is correct
            last_block_hash = self.hash(last_block)
            if block['previous_hash'] != last_block_hash:
                return False

            # Check that the Proof of Work is correct
            # if not self.valid_proof(last_block['proof'], block['proof'], last_block_hash):
            #     return False

            last_block = block
            current_index += 1

        return True

    def resolve_conflicts(self):
        """
        This is our consensus algorithm, it resolves conflicts
        by replacing our chain with the longest one in the network.

        :return: True if our chain was replaced, False if not
        """

        neighbours = set(self.nodes)
        new_chain = None
        if (0 == len(neighbours)):
            return

        # We're only looking for chains longer than ours
        max_length = len(self.chain)

        # Grab and verify the chains from all the nodes in our network
        for node in neighbours:
            try:
                response = requests.get(f'http://{node}/chain')
            except Exception as ex:
                print(ex)
                print('remove node:{}'.format(node))
                self.nodes.remove(node)
                continue

            if response.status_code == 200:
                length = response.json()['length']
                chain = response.json()['chain']

                # Check if the length is longer and the chain is valid
                if length > max_length and self.valid_chain(chain):
                    max_length = length
                    new_chain = chain

        # Replace our chain if we discovered a new, valid chain longer than ours
        if new_chain:
            self.chain = new_chain
            return True

        return False
    """
    def hash_transactions(cc_transactions):
        
        Creates a SHA-256 hash of a transaction

        :param transaction: transaction
    

        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes
        transaction_string = cc_transactions.encode()
        return hashlib.sha256(cc_transactions.encode()).hexdigest()
    """


    def new_block(self, block_version, previous_hash):
        """
        Create a new Block in the Blockchain
        :param  block_version: the version of the block, default 0.01.
        :param  previous_hash: hash of previous block.
        :param  block_hash: merkle top-hash of transcation lists in this block.
        :param  block_timestamp: block pack time, generated by leader node, expired in 5 minutes.
        :param  block_transcations: the transcations included in this block.
        :param  block_mark: block generated way,usualy periodical-"P",fixed_size-"S",fixed_transcation_numbers-"N".
        :param  block_period: time interval since last block//??maybe not needed.
        :param  block_packer: encrypted id of leader.
        """

        block = {
            'index': len(self.chain) + 1,
            'version':block_version,
            'previous_hash':previous_hash ,
            'block_hash':hashlib.sha256((str(self.current_transactions)).encode()).hexdigest(),
            'block_timestamp':time.ctime(),
            'transactions':self.current_transactions,
            'block_mark':"P",
            'block_packer':"0.0.0.1",
        }
        
 
        # Reset the current list of transactions
        self.current_transactions = []

        self.chain.append(block)
        return block

    def new_transaction(self, op_type, op_source, op_object):
        """
        creat new transcation and broadcast
        :param  op_type: 1-for upload;2-for transcation; 3-for deleted(end of share)
        :param  op_source: id of the operator
        :param  op_target: id of the data destanation /not now
        :param  op_object: hash id of the data, generated from IPFS/HGFS system(encrypted, key additional...)
        :param  op_ensure: lock of the opration /not now
        :param  
        """
        self.current_transactions.append({
            'op_type':op_type,
            'op_source':op_source,
            'op_target':"system",
            'op_object':op_object,
        })

        return self.last_block['index'] + 1

    @property
    def last_block(self):
        return self.chain[-1]

    @staticmethod
    def hash(block):
        """
        Creates a SHA-256 hash of a Block

        :param block: Block
        """

        # We must make sure that the Dictionary is Ordered, or we'll have inconsistent hashes
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    
    

    def proof_of_work(self, last_block):
        """
        Simple Proof of Work Algorithm:

         - Find a number p' such that hash(pp') contains leading 4 zeroes
         - Where p is the previous proof, and p' is the new proof
         
        :param last_block: <dict> last Block
        :return: <int>
        """

        last_proof = last_block['proof']
        last_hash = self.hash(last_block)

        proof = 0
        while self.valid_proof(last_proof, proof, last_hash) is False:
            proof += 1

        return proof

    @staticmethod
    def valid_proof(last_proof, proof, last_hash):
        """
        Validates the Proof

        :param last_proof: <int> Previous Proof
        :param proof: <int> Current Proof
        :param last_hash: <str> The hash of the Previous Block
        :return: <bool> True if correct, False if not.

        """

        guess = f'{last_proof}{proof}{last_hash}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"


# Instantiate the Node
app = Flask(__name__)

# Generate a globally unique address for this node
node_identifier = str(uuid4()).replace('-', '')

# Instantiate the Blockchain
blockchain = Blockchain()



#@app.route('/mine', methods=['GET'])
def mine():
    consensus()
    # We run the proof of work algorithm to get the next proof...
    last_block = blockchain.last_block
    #proof = blockchain.proof_of_work(last_block)

    # We must receive a reward for finding the proof.
    # The sender is "0" to signify that this node has mined a new coin.
    # blockchain.new_transaction(
    #     op_type="0",
    #     op_source="0.0.01",
    #     op_object="this file"
    # )
    # Forge the new Block by adding it to the chain
    previous_hash = blockchain.hash(last_block)
    block = blockchain.new_block(0.01,previous_hash)

    response = {
        'message': "New Block Forged",
        'index': block['index'],
        'transactions': block['transactions'],
        'version': block['version'],
        'previous_hash': block['previous_hash'],
    }
   # return jsonify(response), 200

# def do_mine_continus():
#     while True:
#         mine()
#         time.sleep(1)
#         print ("mine!"+str(len(blockchain.chain)))

@app.route('/transactions/new', methods=['POST'])
def new_transaction():
    consensus()
    values = request.get_json()

    # Check that the required fields are in the POST'ed data
    required = ['op_type', 'op_source', 'op_object']
    if not all(k in values for k in required):
        return 'Missing values', 400

    # Create a new Transaction
    index = blockchain.new_transaction(values['op_type'], values['op_source'], values['op_object'])

    response = {'message': f'Transaction will be added to Block {index}'}

    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    PORT = 5003
    network = '<broadcast>'
    s.sendto(json.dumps(values).encode('utf-8'), (network, PORT))
    # '''
    # 广播
    # '''
    # cf = configparser.ConfigParser()
    # try:
    #     cf.read('config.ini')
    #     route = cf.get('init', 'route')
    # except Exception as ex:
    #     print(ex)
    # port=5003
    # network = '<broadcast>'
    # data = json.dumps(values)
    # ips=getips()
    # for ip in ips:
    #     if route in ip:
    #         break
    # with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as udp:
    #     udp.bind((ip,port))
    #     #下面这行代码允许发送广播数据
    #     udp.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    #     udp.sendto(data.encode('utf-8'),(network,port))
    print(jsonify(response))
    return jsonify(response), 201


@app.route('/chain', methods=['GET'])
def full_chain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
    }
    return jsonify(response), 200


@app.route('/nodes/register', methods=['POST'])
def register_nodes():
    values = request.get_json()

    # values = {"nodes":["http://127.0.0.1:5000"]}
    nodes = values.get('nodes')
    if nodes is None:
        return "Error: Please supply a valid list of nodes", 400

    for node in nodes:
        blockchain.register_node(node)

    response = {
        'message': 'New nodes have been added',
        'total_nodes': list(blockchain.nodes),
    }
    print(response)
    return jsonify(response), 201


# @app.route('/nodes/resolve', methods=['GET'])
def consensus():
    replaced = blockchain.resolve_conflicts()

    # if replaced:
    #     response = {
    #         'message': 'Our chain was replaced',
    #         'new_chain': blockchain.chain
    #     } 
    # else:
    #     response = {
    #         'message': 'Our chain is authoritative',
    #         'chain': blockchain.chain
    #     }

    # return jsonify(response), 200

def getips():
    '''
    获取本机所有ipv4的ip地址
    '''
    ips=[]
    hostname = socket.gethostname()
    addrs = socket.getaddrinfo(hostname,None,family=socket.AF_INET)
    for item in addrs:
        ips.append(item[4][0])
    return ips

def broadcast_client():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    PORT = 5003
    s.bind(('', PORT))
    print('Listening for broadcast at ', s.getsockname())
    while True:
        data,address = s.recvfrom(65535)
        s_data = data.decode('utf-8')
        print('Server received from {}:{}'.format(address, s_data))
        if (-1 != s_data.find("transactions")):
            print("new_block")
            consensus()
            newblock_json = json.loads(s_data)
            print(blockchain.chain[-1]['index'])
            print(newblock_json['index'])
            if (blockchain.chain[-1]['index'] != newblock_json['index']):
                blockchain.chain.append(newblock_json)
        else:
            print("new_transactions:{}".format(s_data))

if __name__ == '__main__':
    from argparse import ArgumentParser

    #register_nodes()
    #consensus()

    try:
        _thread.start_new_thread( broadcast_client, () )
    except:
        print ("Error: 无法启动线程")
    parser = ArgumentParser()
    parser.add_argument('-p', '--port', default=5000, type=int, help='port to listen on')
    args = parser.parse_args()
    port = args.port

    app.run(host='0.0.0.0', port=port)












       